use core::panic;
use core::result::Result::{Ok,Err};

use crate::apidef::*;
//use crate::error::*;
use crate::eventflag::*;
use crate::logger::*;
use crate::syslib::*;
use crate::task::*;
use crate::typedef::*;

static mut FLGID: ID = 0;
static mut CFLG:  TCflg = TCflg {
    flgatr: (TA_TFIFO | TA_WMUL) as u32,
    iflgptn: 0,
};

static mut TSKSTK_MAN1: [u8;1024] = [0;1024];
static mut TSKID_MAN1: ID = 0;
fn tsk_man1() {

    debug("Start tsk_man1()\r\n");
    mandelbrot(0, HEIGHT/2);

    unsafe {
        match tk_set_flg(FLGID, 1<<0) {
            Ok(()) => {}
            Err(err) => {
                error(err);
                panic!("failed at eventflag.tk_set_flg");
            }
        }
    }
    match tk_slp_tsk(TMO_FEVR) {
        Ok(()) => {}
        Err(err) => {
            error(err);
            panic!("failed at task.tk_slp_tsk");
        }
    }
    debug("End tsk_man1()\r\n");
}

static mut TSKSTK_MAN2: [u8;1024] = [0;1024];
static mut TSKID_MAN2: ID = 0;
fn tsk_man2() {

    debug("Start tsk_man2()\r\n");
    mandelbrot(HEIGHT/2, HEIGHT as usize);

    unsafe {
        match tk_set_flg(FLGID, 1<<1) {
            Ok(()) => {}
            Err(err) => {
                error(err);
                panic!("failed at eventflag.tk_set_flg");
            }
        }
    }
    match tk_slp_tsk(TMO_FEVR) {
        Ok(()) => {}
        Err(err) => {
            error(err);
            panic!("failed at task.tk_slp_tsk");
        }
    }
    debug("End tsk_man2()\r\n");
}

pub fn usermain() -> i32 {

    debug("Start app main()\r\n");

    static mut CTSK_MAN1: TCtsk = TCtsk {
        tskatr: TA_HLNG | TA_RNG3 | TA_USERBUF,
        task: 0,
        itskpri: 10,
        stksz: core::mem::size_of::<[u8;1024]>() as u32,
        bufptr: 0,
    };

    static mut CTSK_MAN2: TCtsk = TCtsk {
        tskatr: TA_HLNG | TA_RNG3 | TA_USERBUF,
        task: 0,
        itskpri: 10,
        stksz: core::mem::size_of::<[u8;1024]>() as u32,
        bufptr: 0,
    };

    unsafe {
        let faddr = tsk_man1;
        CTSK_MAN1.task  = faddr as u32;
        CTSK_MAN1.bufptr = (&TSKSTK_MAN1 as *const u8) as u32;
        let faddr = tsk_man2;
        CTSK_MAN2.task  = faddr as u32;
        CTSK_MAN2.bufptr = (&TSKSTK_MAN2 as *const u8) as u32;
    }

    unsafe {
        debug("Calling tk_cre_flg()\r\n");
        match tk_cre_flg(&CFLG) {
            Ok(id) => {
                FLGID = id;
            }
            Err(err) => {
                error(err);
                panic!("Failed at eventflag.tk_cre_flg");
            }
        }
       
        debug("Calling tk_cre_tsk() tsk_man1\r\n");
        match tk_cre_tsk(&mut CTSK_MAN1) {
            Ok(id) => {
                TSKID_MAN1 = id;
            }
            Err(err) => {
                error(err);
                panic!("Failed at task.tk_cre_tsk");
            }
        }
        debug("Calling tk_sta_tsk() tsk_man1\r\n");
        match tk_sta_tsk(TSKID_MAN1) {
            Ok(()) => {}
            Err(err) => {
                error(err);
                panic!("Failed at task.tk_sta_tsk");
            }
        }
    
        debug("Calling tk_cre_tsk() tsk_man2\r\n");
        match tk_cre_tsk(&mut CTSK_MAN2) {
            Ok(id) => {
                TSKID_MAN2 = id;
            }
            Err(err) => {
                error(err);
                panic!("Failed at task.tk_cre_tsk");
            }
        }
        debug("Calling tk_sta_tsk() tsk_man2\r\n");
        match tk_sta_tsk(TSKID_MAN2) {
            Ok(()) => {}
            Err(err) => {
                error(err);
                panic!("Failed at task.tk_sta_tsk");
            }
        }

        debug("Calling tk_wai_flg() tsk_man1\r\n");
        let mut flgptn: usize = 0;
        match tk_wai_flg(FLGID, 1<<0, TWF_ANDW, &mut flgptn, TMO_FEVR) {
            Ok(()) => {}
            Err(err) => {
                error(err);
                panic!("Failed at eventflag.tk_wai_flg");
            }
        }

        debug("Calling tk_wai_flg() tsk_man2\r\n");
        match tk_wai_flg(FLGID, 1<<1, TWF_ANDW, &mut flgptn, TMO_FEVR) {
            Ok(()) => {}
            Err(err) => {
                error(err);
                panic!("Failed at eventflag.tk_wai_flg");
            }
        }
    }

    tm_putstring("End\n");

    let mut x:usize = 0;
    let mut y:usize = 0;
    unsafe {
        while y < HEIGHT  {
            while x < WIDTH {
                tm_putchar(OUTPUT[y][x]);
                x = x + 1;
            }
            tm_putstring("\r\n");
            y = y + 1;
            x = 0;
        }
    }

    match tk_slp_tsk(TMO_FEVR) {
        Ok(()) => {}
        Err(err) => {
            error(err);
            panic!("failed at tk_slp_tsk");
        }
    }
 
    return 0;

}


pub const WIDTH:usize = 80;
pub const HEIGHT:usize = 24;
pub const MAX_ITER:usize = 1000;

pub static mut OUTPUT:[[char;WIDTH+1]; HEIGHT]= [
 [ ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
 [ ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
 [ ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
 [ ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
 [ ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
 [ ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
 [ ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
 [ ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
 [ ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
 [ ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
 [ ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
 [ ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
 [ ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
 [ ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
 [ ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
 [ ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
 [ ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
 [ ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
 [ ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
 [ ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
 [ ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
 [ ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
 [ ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
 [ ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
];

pub const SYMBOLS:[char;71] = [
 ' ','.','\'','`','^','"',',',':',';','I','l','!','i','>','<','~','+','_','-','?',']','[','}','{','1',')',
 '(','|','\\','/','*','t','f','j','r','x','n','u','v','c','z','X','Y','U','J','C','L','Q','0','O','Z','m',
 'w','q','p','d','b','k','h','a','o','*','#','M','W','&','8','%','B','@','$'
];

pub fn mandelbrot(h_start:usize, h_end:usize) {

    let symlen = 71;

    let mut y:usize = h_start;
    let mut x:usize ;
    while y < h_end  {
        x = 0; 
        while  x < WIDTH  {
            let real = ( x as f64 - WIDTH  as f64 / 2.0 ) * 3.0 / WIDTH as f64 - 0.5;
            let imag = ( y as f64 - HEIGHT as f64 / 2.0 ) * 2.0 / HEIGHT as f64;
            let mut zr:f64 = 0.0;
            let mut zi:f64 = 0.0;
            let mut iteration:usize = 0;

            while (zr * zr + zi * zi <= 4.0) && (iteration < MAX_ITER) { 
                let zr2:f64 = zr * zr - zi * zi + real;
                let zi2:f64 = 2.0 * zr * zi + imag;

                zr = zr2;
                zi = zi2;

                iteration = iteration + 1;
            }
            let index = if iteration == MAX_ITER { 0 } else { iteration % symlen };
            unsafe {
                OUTPUT[y][x] = SYMBOLS[index];
            }
            x = x + 1;
       }
       unsafe {
           OUTPUT[y][WIDTH] = '\0';
       }
       y = y + 1;
   }
}
 
